# Description:
#   A way to remote control TV, speaker, air conditioner etc.
#
# Dependencies:
#   None
#
# Configuration:
#   HUBOT_IRKIT_ENDPOINT
#
# Commands:
#   hubot turn on <target> - Turn on ( tv | ac | sp ).
#   hubot turn off <target> - Turn off ( tv | ac | sp ).
#
# Author:
#   spesnova

endpoint = process.env.HUBOT_IRKIT_ENDPOINT
signals =
  "tv":
    "on": {"format":"raw","freq":38,"data":[17421,8755,1150,1150,1150,1150,1150,1150,1037,1150,1150,1150,1150,1150,1150,3341,1073,1073,1073,3341,1073,3341,1073,3341,1073,3341,1073,3341,1073,3341,1073,1073,1073,3341,1073,1073,1073,3341,1073,1073,1073,1073,1073,3341,1073,1190,1037,1190,1037,1190,1037,3341,1073,1190,1073,3228,1111,3228,1111,1111,1111,3228,1111,3228,1111,3228,1111,65535,0,13693,17421,4400,1111,65535,0,65535,0,60108,17421,4554,1037]},
    "off": {"format":"raw","freq":38,"data":[17421,8755,1037,1150,1037,1150,1037,1150,1037,1150,1037,1037,1037,1150,1037,3341,1111,1111,1111,3341,1111,3341,1111,3341,1111,3341,1111,3341,1111,3341,1111,1111,1111,3341,1111,1111,1111,3341,1111,1111,1111,1111,1111,3341,1111,1111,1111,1111,1111,1111,1111,3341,1111,1111,1111,3341,1111,3341,1111,1111,1111,3341,1111,3341,1111,3341,1111,65535,0,13693,17421,4400,1073]}
  "ac":
    "on": {"format":"raw","freq":38,"data":[8459,8459,968,3341,1002,3341,1002,3341,1002,3341,1002,1190,968,1190,968,3228,968,1150,968,1150,968,1150,968,1150,968,1150,968,3228,968,3228,968,1232,904,3341,968,1232,968,1111,968,1111,968,1111,968,1111,968,1111,968,3228,1002,3228,904,3341,904,3341,904,3341,904,3341,1002,3341,1002,3341,1002,1232,904,1232,904,1232,904,1232,904,1232,904,1232,815,1232,968,1150,968,1150,968,3228,1002,3228,1002,3228,1002,1190,968,1190,968,1190,968,1190,968,1190,968,1190,968,1190,968,1190,968,1190,968,1190,968,1190,968,1190,968,3341,968,3341,968,1111,968,1111,968,1232,904,1232,904,1232,904,1232,904,1232,904,1232,904,3341,904,3341,904,1232,968,1111,1002,1111,904,1232,904,3341,904,1232,904,10762,8459,8459,904,3341,904,3341,904,3341,904,3341,904,1275,873,1275,873,3341,873,1275,904,1275,904,1275,904,1275,904,1275,904,3341,904,3341,904,1275,904,3341,968,1232,904,1232,904,1232,904,1232,904,1232,904,1232,904,3341,904,3341,904,3341,904,3341,904,3341,904,3341,904,3341,904,3341,904,1232,873,1232,873,1232,873,1232,873,1232,873,1232,873,1232,873,1232,873,1232,873,3458,815,3458,904,3341,904,1232,904,1232,904,1232,904,1232,904,1232,904,1232,904,1232,904,1232,904,1111,968,1111,968,1275,843,1275,843,3341,968,3341,968,1275,815,1275,904,1275,904,1275,904,1275,904,1275,904,1275,904,1150,968,3341,904,3341,904,1232,904,1232,904,1232,815,1319,815,3341,873,1232,968]},
    "off": {"format":"raw","freq":38,"data":[8459,8459,1073,3228,904,3228,904,3228,904,3228,904,1190,904,1190,904,3458,873,1275,873,1275,873,1275,873,1275,873,1275,873,3341,873,3341,968,1190,968,3458,904,1232,904,1232,904,1463,640,1232,1002,1232,873,1275,873,3341,904,3341,904,3341,815,3341,1002,3228,1002,3228,873,3341,1002,3341,1002,1150,904,1150,904,1319,815,1319,904,1190,904,1190,904,1190,904,1190,904,1190,904,3458,968,3458,968,3458,843,1190,968,1232,968,1232,968,1232,968,1232,968,1232,968,1232,873,1275,873,1275,873,1275,873,1275,873,3341,873,3341,873,3341,873,1190,968,1319,815,1319,904,1111,904,1275,904,1275,904,1275,1002,1232,815,3341,968,3341,968,1275,843,1275,843,1275,1037,3228,935,3228,935,1319,815,10762,8459,8459,935,3341,815,3458,815,3458,904,3458,815,1275,815,1275,968,3341,843,1275,843,1275,968,1232,968,1232,843,1319,843,3341,843,3341,761,1232,904,3458,761,1319,843,1275,843,1150,968,1275,815,1275,815,1275,815,3458,904,3458,904,3458,904,3458,904,3458,904,3458,761,3458,761,3458,761,1319,815,1319,815,1319,815,1319,815,1319,686,1514,815,1319,815,1319,904,1275,904,3458,761,3458,904,3341,904,1275,904,1275,815,1567,640,1232,904,1232,686,1366,904,1319,787,1319,787,1463,686,1463,598,1366,815,3458,815,3458,904,3458,904,1366,761,1366,843,1275,843,1275,843,1275,843,1275,843,1275,843,1275,369,3968,761,3458,761,1567,578,1232,968,1232,968,3579,598,3579,843,1232,843]}


module.exports = (robot) ->
  robot.respond /turn\s*on\s*(.*)/i, (msg) ->
    target = msg.match[1]
    data = JSON.stringify signals[target]["on"]

    robot.http(endpoint)
      .post(data) (err, res, body) ->
        if err
          msg.send "Encountered an error :("
          robot.logger.debug err
          return
        msg.send "The #{target} turned on"

  robot.respond /turn\s*off\s*(.*)/i, (msg) ->
    target = msg.match[1]
    data = JSON.stringify signals[target]["off"]

    robot.http(endpoint)
      .post(data) (err, res, body) ->
        if err
          msg.send "Encountered an error :("
          robot.logger.debug err
          return
        msg.send "The #{target} turned off"
